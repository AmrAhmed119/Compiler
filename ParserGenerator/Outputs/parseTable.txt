NonTerminal: ASSIGNMENT
Terminal: id Production: id assign EXPRESSION ; 
NonTerminal: DECLARATION
Terminal: id Production: sync 
Terminal: if Production: sync 
Terminal: int Production: int id ; 
Terminal: float Production: float id ; 
Terminal: while Production: sync 
Terminal: } Production: sync 
NonTerminal: EXPRESSION
Terminal: id Production: SIMPLE_EXPRESSION EXPRESSION* 
Terminal: ( Production: SIMPLE_EXPRESSION EXPRESSION* 
Terminal: ) Production: sync 
Terminal: ; Production: sync 
Terminal: addop Production: SIMPLE_EXPRESSION EXPRESSION* 
Terminal: num Production: SIMPLE_EXPRESSION EXPRESSION* 
NonTerminal: EXPRESSION*
Terminal: ) Production: \L 
Terminal: ; Production: \L 
Terminal: relop Production: relop SIMPLE_EXPRESSION 
NonTerminal: FACTOR
Terminal: id Production: id 
Terminal: ( Production: ( EXPRESSION ) 
Terminal: ) Production: sync 
Terminal: ; Production: sync 
Terminal: relop Production: sync 
Terminal: addop Production: sync 
Terminal: num Production: num 
Terminal: mulop Production: sync 
NonTerminal: IF
Terminal: if Production: if ( EXPRESSION ) { STATEMENT } else { STATEMENT } 
NonTerminal: METHOD_BODY
Terminal: id Production: STATEMENT_LIST 
Terminal: if Production: STATEMENT_LIST 
Terminal: int Production: STATEMENT_LIST 
Terminal: float Production: STATEMENT_LIST 
Terminal: while Production: STATEMENT_LIST 
Terminal: $ Production: sync 
NonTerminal: PRIMITIVE_TYPE
Terminal: int Production: int 
Terminal: float Production: float 
NonTerminal: SIGN
Terminal: id Production: sync 
Terminal: ( Production: sync 
Terminal: addop Production: addop 
Terminal: num Production: sync 
NonTerminal: SIMPLE_EXPRESSION
Terminal: id Production: TERM SIMPLE_EXPRESSION' 
Terminal: ( Production: TERM SIMPLE_EXPRESSION' 
Terminal: ) Production: sync 
Terminal: ; Production: sync 
Terminal: relop Production: sync 
Terminal: addop Production: SIGN TERM SIMPLE_EXPRESSION' 
Terminal: num Production: TERM SIMPLE_EXPRESSION' 
NonTerminal: SIMPLE_EXPRESSION'
Terminal: ) Production: \L 
Terminal: ; Production: \L 
Terminal: relop Production: \L 
Terminal: addop Production: addop TERM SIMPLE_EXPRESSION' 
NonTerminal: STATEMENT
Terminal: id Production: id assign EXPRESSION ; 
Terminal: if Production: if ( EXPRESSION ) { STATEMENT } else { STATEMENT } 
Terminal: int Production: DECLARATION 
Terminal: float Production: DECLARATION 
Terminal: while Production: while ( EXPRESSION ) { STATEMENT } 
Terminal: } Production: sync 
NonTerminal: STATEMENT_LIST
Terminal: id Production: STATEMENT STATEMENT_LIST' 
Terminal: if Production: STATEMENT STATEMENT_LIST' 
Terminal: int Production: STATEMENT STATEMENT_LIST' 
Terminal: float Production: STATEMENT STATEMENT_LIST' 
Terminal: while Production: STATEMENT STATEMENT_LIST' 
Terminal: $ Production: sync 
NonTerminal: STATEMENT_LIST'
Terminal: id Production: STATEMENT STATEMENT_LIST' 
Terminal: if Production: STATEMENT STATEMENT_LIST' 
Terminal: int Production: STATEMENT STATEMENT_LIST' 
Terminal: float Production: STATEMENT STATEMENT_LIST' 
Terminal: while Production: STATEMENT STATEMENT_LIST' 
Terminal: $ Production: \L 
NonTerminal: TERM
Terminal: id Production: id TERM' 
Terminal: ( Production: ( EXPRESSION ) TERM' 
Terminal: ) Production: sync 
Terminal: ; Production: sync 
Terminal: relop Production: sync 
Terminal: addop Production: sync 
Terminal: num Production: num TERM' 
NonTerminal: TERM'
Terminal: ) Production: \L 
Terminal: ; Production: \L 
Terminal: relop Production: \L 
Terminal: addop Production: \L 
Terminal: mulop Production: mulop FACTOR TERM' 
NonTerminal: WHILE
Terminal: while Production: while ( EXPRESSION ) { STATEMENT } 
